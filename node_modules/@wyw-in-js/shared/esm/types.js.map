{"version":3,"file":"types.js","names":["ValueType"],"sources":["../src/types.ts"],"sourcesContent":["import type {\n  BigIntLiteral,\n  BooleanLiteral,\n  DecimalLiteral,\n  Identifier,\n  NullLiteral,\n  NumericLiteral,\n  StringLiteral,\n} from '@babel/types';\n\nexport type Artifact = [name: string, data: unknown];\n\nexport type BuildCodeFrameErrorFn = <TError extends Error>(\n  msg: string,\n  Error?: new (innerMsg: string) => TError\n) => TError;\n\nexport enum ValueType {\n  LAZY,\n  FUNCTION,\n  CONST,\n}\n\nexport type LazyValue = {\n  buildCodeFrameError: BuildCodeFrameErrorFn;\n  ex: Identifier;\n  importedFrom?: string[];\n  kind: ValueType.LAZY;\n  source: string;\n};\n\nexport type FunctionValue = {\n  buildCodeFrameError: BuildCodeFrameErrorFn;\n  ex: Identifier;\n  importedFrom?: string[];\n  kind: ValueType.FUNCTION;\n  source: string;\n};\n\nexport type ConstValue = {\n  buildCodeFrameError: BuildCodeFrameErrorFn;\n  ex:\n    | StringLiteral\n    | NumericLiteral\n    | NullLiteral\n    | BooleanLiteral\n    | BigIntLiteral\n    | DecimalLiteral;\n  kind: ValueType.CONST;\n  source: string;\n  value: string | number | boolean | null;\n};\n\nexport type ExpressionValue = LazyValue | FunctionValue | ConstValue;\n\nexport type WYWEvalMeta = {\n  __wyw_meta: {\n    className: string;\n    extends: WYWEvalMeta;\n  };\n};\n\nexport type Location = {\n  column: number;\n  line: number;\n};\n\nexport type Replacement = {\n  length: number;\n  original: { end: Location; start: Location };\n};\n\nexport type Replacements = Array<Replacement>;\n\n/**\n * CSS-related types\n */\n\nexport interface ICSSRule {\n  atom?: boolean;\n  className: string;\n  cssText: string;\n  displayName: string;\n  start: Location | null | undefined;\n}\n\nexport type Rules = Record<string, ICSSRule>;\n"],"mappings":"AAiBA,WAAYA,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;;AAyDrB;AACA;AACA"}
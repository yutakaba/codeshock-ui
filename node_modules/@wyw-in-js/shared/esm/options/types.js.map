{"version":3,"file":"types.js","names":[],"sources":["../../src/options/types.ts"],"sourcesContent":["import type { TransformOptions } from '@babel/core';\nimport type { File } from '@babel/types';\n\nimport type { IVariableContext } from '../IVariableContext';\nimport type { Core } from '../babel';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype VmContext = Record<string, any>; // It's Context from `vm`\n\nexport type ClassNameSlugVars = {\n  dir: string;\n  ext: string;\n  file: string;\n  hash: string;\n  index: number;\n  name: string;\n  title: string;\n};\n\nexport type ClassNameFn = (\n  hash: string,\n  title: string,\n  args: ClassNameSlugVars\n) => string;\n\nexport type VariableNameFn = (context: IVariableContext) => string;\n\nexport type EvaluatorConfig = {\n  features: StrictOptions['features'];\n  highPriorityPlugins: string[];\n  onlyExports: string[];\n};\n\nexport type Evaluator = (\n  evalConfig: TransformOptions,\n  ast: File,\n  code: string,\n  config: EvaluatorConfig,\n  babel: Core\n) => [\n  ast: File,\n  code: string,\n  imports: Map<string, string[]> | null,\n  exports?: string[] | null,\n];\n\nexport type EvalRule = {\n  action: Evaluator | 'ignore' | string;\n  babelOptions?: TransformOptions;\n  test?: RegExp | ((path: string, code: string) => boolean);\n};\n\nexport type FeatureFlag = boolean | string | string[];\n\ntype AllFeatureFlags = {\n  dangerousCodeRemover: FeatureFlag;\n  globalCache: FeatureFlag;\n  happyDOM: FeatureFlag;\n  softErrors: FeatureFlag;\n  useBabelConfigs: FeatureFlag;\n  useWeakRefInEval: FeatureFlag;\n};\n\nexport type FeatureFlags<\n  TOnly extends keyof AllFeatureFlags = keyof AllFeatureFlags,\n> = Pick<AllFeatureFlags, TOnly>;\n\nexport type CodeRemoverOptions = {\n  componentTypes?: Record<string, string[]>;\n  hocs?: Record<string, string[]>;\n};\n\nexport type StrictOptions = {\n  babelOptions: TransformOptions;\n  classNameSlug?: string | ClassNameFn;\n  codeRemover?: CodeRemoverOptions;\n  displayName: boolean;\n  evaluate: boolean;\n  extensions: string[];\n  features: FeatureFlags;\n  highPriorityPlugins: string[];\n  ignore?: RegExp;\n  overrideContext?: (\n    context: Partial<VmContext>,\n    filename: string\n  ) => Partial<VmContext>;\n  rules: EvalRule[];\n  tagResolver?: (source: string, tag: string) => string | null;\n  variableNameConfig?: 'var' | 'dashes' | 'raw';\n  variableNameSlug?: string | VariableNameFn;\n};\n"],"mappings":""}